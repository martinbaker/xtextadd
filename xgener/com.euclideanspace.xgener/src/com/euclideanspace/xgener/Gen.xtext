grammar com.euclideanspace.xgener.Gen with org.eclipse.xtext.common.Terminals

generate gen "http://www.euclideanspace.com/xgener/Gen"

Model:
	(proj+=Project|clas+=ClassType |proc+=Procedure |prim+=Primary |lit+=Literal |exp+=Expression)*;
	
Project:
	'PROJECT' name=ID
	( ('PROJECTNAME' proj += QualifiedName)
    | ('NAME' nam += QualifiedName)
    )*
;

ClassType:
	'CLASS' name=ID
    ( noclass+='NOCLASS' 
    | ('PREFIX' prefix += MultString)
    | ('SUFFIX' suffix += MultString)
    | ('BLOCKING' blocking+=('BRACES'|'INDENT'))
    )*;

Procedure:
	'PROCEDURE' name=ID
    (('PREFIX' prefix += MultString)
    | ('SUFFIX' suffix += MultString)
    | ('TYPES' types+=('COLONSEPERATED'|'SPACESEPERATED'|'INHEADER'|'INFERRED'|'UNTYPED'))
    )*;

Expression:
	'EXPRESSION' name=ID
    prec+=Precedence*;

/* make this rule separate from Expression so prefix,suffix,infix.... can be
 * in the same list in any order
 */
Precedence:
	(ruletyp='CALLER' rule=ID ('.' feature1=ID)?)
	| (ruletyp='RULE' rule=ID customrule=STRING)
	| (ruletyp='PREFIX' rule=ID prefix=MultString (feature1=ID '=')? par1=ID)
    | (ruletyp='SUFFIX' rule=ID (feature1=ID '=')? par1=ID suffix=MultString)
    | (ruletyp='INFIX' rule=ID (feature1=ID '=')? par1=ID infix=MultString (feature2=ID '=')? par2=ID)
    | (ruletyp='INFIXRIGHT' rule=ID (feature1=ID '=')? par1=ID infix=MultString (feature2=ID '=')? par2=ID)
    | (ruletyp='OUTER' rule=ID (feature1=ID '=')? par1=ID inner+=InnerPrecedence+)
    | (ruletyp='COMPOUND' rule=ID '(' prec+=SubPrecedence+ ')')
    | (ruletyp='BRACKET' rule=ID bracket=ID)
    | (ruletyp='BRACES' rule=ID braces=ID)
    | (ruletyp='PARENTHESIS' rule=ID parenthesis=ID)
    | (ruletyp='ANGLE' rule=ID angle=ID)
    | (ruletyp='MEMBERFEATURE' rule=ID (feature1=ID '=')? par1=ID infix=MultString (feature2=ID '=')? par2=ID)
;

SubPrecedence:
	 (ruletyp='SUBRULE' customrule=STRING)
	| (ruletyp='SUBPREFIX' prefix=MultString (feature1=ID '=')? par2=ID)
    | (ruletyp='SUBSUFFIX' suffix=MultString)
    | (ruletyp='SUBINFIX' (feature1=ID '=')? par1=ID infix=MultString (feature2=ID '=')? par2=ID)
    | (ruletyp='SUBINFIXRIGHT' (feature1=ID '=')? par1=ID infix=MultString (feature2=ID '=')? par2=ID)
    | (ruletyp='SUBBRACKET' rule=ID bracket=ID)
    | (ruletyp='SUBBRACES' rule=ID braces=ID)
    | (ruletyp='SUBPARENTHESIS' rule=ID parenthesis=ID)
    | (ruletyp='SUBANGLE' rule=ID angle=ID)
;

InnerPrecedence:
	 (ruletyp='INNERRULE' customrule=STRING)
	| (ruletyp='INNERPREFIX' prefix=MultString (feature1=ID '=')? par2=ID)
    | (ruletyp='INNERSUFFIX' suffix=MultString)
    | (ruletyp='INNERINFIX' (mod='CALLER' rule=ID ('.' feature1=ID)?)? infix=MultString (feature2=ID '=')? par2=ID)
    | (ruletyp='INNERINFIXRIGHT' (mod='CALLER' rule=ID ('.' feature1=ID)?)? infix=MultString (feature2=ID '=')? par2=ID)
    | (ruletyp='INNERBRACKET' rule=ID bracket=ID)
    | (ruletyp='INNERBRACES' rule=ID braces=ID)
    | (ruletyp='INNERPARENTHESIS' rule=ID parenthesis=ID)
    | (ruletyp='INNERANGLE' rule=ID angle=ID)
;

QualifiedName: qn+=ID ('.' qn+=ID)*;

MultString: {MultString} (ms=STRING opt?='?'?| mi=ID | ( synpred='=>'? '(' cs+=ComboString ('|' cs+=ComboString)* ')'));

ComboString: {ComboString} (inner+=MultString*);

Primary:
	'PRIMARY' name=ID
    (inner+=PrimaryInner)*	
;

PrimaryInner:
  (primarytyp='CONSTRUCTOR' construct=ID) |
  (primarytyp='BLOCK' construct=ID) |
  (primarytyp='SWITCH' construct=ID construct2=ID) |
  (primarytyp='SYNCHRONIZED' construct=ID) |
  (primarytyp='FEATURECALL' construct=ID feature=MultString) |
  (primarytyp='IFEXPRESSION' construct=ID) |
  (primarytyp='FOREXPRESSION' construct=ID) |
  (primarytyp='BASICFORLOOPEXPRESSION' construct=ID) |
  (primarytyp='WHILEEXPRESSION' construct=ID) |
  (primarytyp='DOWHILEEXPRESSION' construct=ID) |
  (primarytyp='THROWEXPRESSION' construct=ID) |
  (primarytyp='RETURNEXPRESSION' construct=ID) |
  (primarytyp='TRYCATCHFINALYEXPRESSION' construct=ID) |
  (primarytyp='PARENTHESIZEDEXPRESSION' construct=ID) |
  (primarytyp='LITERALEXPRESSION' construct=ID)
;

Literal:
	'LITERAL' name=ID
    (inner+=LiteralInner)*	
;

LiteralInner:
  (primarytyp='COLLECTIONLITERAL' construct=ID) |
  (primarytyp='CLOSURE' construct=ID) |
  (primarytyp='BOOLEANLITERAL' construct=ID) |
  (primarytyp='NUMBERLITERAL' construct=ID) |
  (primarytyp='NULLLITERAL' construct=ID) |
  (primarytyp='STRINGLITERAL' construct=ID) |
  (primarytyp='TYPELITERAL' construct=ID)
;